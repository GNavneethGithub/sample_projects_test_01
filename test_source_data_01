## Data Aggregation Analysis

### Grouping Dimensions (7 columns)

**Why these columns:**
- `host.name` - Essential for identifying which specific server has issues during troubleshooting
- `site` - Required for geographic analysis and datacenter-level capacity planning
- `system.filesystem.mount_point` - Critical to distinguish between multiple filesystems per host (/, /var, /tmp) as they have different usage patterns
- `system.filesystem.type` - Necessary because different filesystem types (xfs, ext4, btrfs) have different performance characteristics and limitations
- `bu_code` - Business unit identification for cost allocation and resource accountability
- `bg_code` - Business group structure for organizational reporting and escalation
- `pri_owner` - Primary owner assignment for incident escalation and responsibility tracking

**Rationale:** These fields answer "WHERE is the problem occurring?" - geographically, organizationally, and technically. Without these dimensions, we cannot locate issues or assign responsibility.

### Aggregated Metrics (10 columns)

**Why these columns:**
- `system.filesystem.used.pct` - Primary metric for capacity alerting and threshold monitoring
- `system.filesystem.used.bytes` - Absolute usage measurement for trend analysis and growth planning
- `system.filesystem.available` - Available space calculation for immediate capacity assessment
- `system.filesystem.free` - Free space monitoring for capacity planning
- `system.filesystem.total` - Total capacity for validation and planning
- `system.filesystem.files` - Total inode capacity for file system limits
- `system.filesystem.free_files` - Available inode tracking for file creation capability
- `system.filesystem.used_files` - Inode consumption patterns
- `system.filesystem.used_files_pct` - Inode utilization percentage for threshold alerts
- `event.duration` - Data collection performance monitoring

**Aggregation method:** min/max/avg/p95 to preserve spikes, detect baselines, and maintain alerting capability

**Rationale:** These metrics answer "HOW SEVERE is the problem?" and "IS IT GETTING WORSE?" They represent measurable quantities that change over time and directly impact system operations.

### Eliminated Columns (63 columns)

**Categories being dropped:**
- **Agent metadata** - `agent.id`, `agent.version`, `elastic_agent.version` (15 columns)
- **Processing metadata** - `logstash_processed_at`, `event.ingested`, `data_stream.*` (8 columns)
- **Network details** - `host.ip`, `host.mac`, `host.id` (6 columns)
- **Empty fields** - `farm`, `grid_*` (all "NA" values) (12 columns)
- **Unique identifiers** - `_id`, `agent.ephemeral_id` (5 columns)
- **Technical overhead** - `ecs.version`, `@version`, `service.type` (17 columns)

**Why these are eliminated:**
- **Agent metadata:** Version numbers and internal IDs serve no operational purpose after data ingestion
- **Processing metadata:** Timestamps and pipeline identifiers are only relevant during data flow, not for monitoring
- **Network details:** IP addresses and MAC addresses don't contribute to filesystem performance analysis
- **Empty fields:** Fields containing only "NA" values provide zero information content
- **Unique identifiers:** Become meaningless when multiple records are aggregated together
- **Technical overhead:** Schema versions and system metadata don't help with operational decisions

**Elimination criteria:** Fields that don't answer "What is the problem?", "Where is it occurring?", or "How severe is it?"

### Summary

**Aggregation will be performed on:** `host.name` + `site` + `system.filesystem.mount_point` + `system.filesystem.type` + `bu_code` + `bg_code` + `pri_owner`

**Final result:** We will lose **63 columns** after aggregation, retaining only **17 columns** (7 grouping + 10 aggregated metrics) that provide complete operational visibility.
